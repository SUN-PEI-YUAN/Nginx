##
# @server CentOS7
# @host yourhostname.com
# @desc nginx host rules
# @Administrator SUN-PEI-YUAN <infuture56@gmail.com>
##

# 禁止空主機頭訪問(維護狀態)
#` server {
#`     listen       80 default_server;
#`     server_name _;
#`     return 500;
#` }

server {
    listen 80;
    listen [::]:80;
    server_name yourhostname.com;
    #` Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    return 301 https://$host$request_uri;
}


server {
    #` 傾聽 HTTPS 標準埠號 443
    listen 443 ssl http2;
    #` 同時啟用 IPv6 的 HTTPS 安全加密網頁
    listen [::]:443 ssl http2;
    server_name yourhostname.com;
    #` certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    #` 啟用 SSL
    ssl on;
    #` 設定 SSL 憑證
    ssl_certificate /etc/letsencrypt/live/yourhostname.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourhostname.com/privkey.pem;
    #` 其他 SSL 選項
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    #` 確認憑證
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;
    # add_header Strict-Transport-Security max-age=63072000; includeSubdomains; preload";

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

    #` 網站根目錄
    root /web/marksun;
    index index.php;
 
    error_log   /var/log/nginx/yourhostname.com/error.log;
    #` 下面這句是訪問log，按需開關
    access_log  /var/log/nginx/yourhostname.com/access.log;

    #` favicon，站點的圖標，可以顯示在瀏覽器標題欄上，和robots.txt兩個都不需要log
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location =/robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    #` 所有靜態文件都直通，解決了之前jpg等文件單獨設置直通的問題，另外還可以直接支持固定鏈接
    location / {
        try_files $uri $uri/ /index.php?$args;
    }
    
    #` 自定義404
    # error_page  404              /404.html;

    #` 自定義錯誤頁
    #` redirect server error pages to the static page /50x.html
    #`
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    #` 對上傳目錄禁止執行php，並阻止除圖片以外的任何文件類型
    location /wp-content/uploads/ {
        if ($request_filename !~* \.(jpg|jpeg|gif|png)$) {
             return 403;
        }
        location ~ .*\.(php)?$ {
           deny all;
        }
    }
    #` php文件發送到php5-fpm，現在這一段不需要寫root目錄了
    #`
    location ~ \.php$ {
        #` 檢查php文件是否真實存在，防止偽裝成jpg的php等
        try_files $uri =404;
        #` 設定FastCGI功能
        fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;

    }

    #` deny access to .htaccess files, if Apache's document root
    #` concurs with nginx's one
    #`
    location ~ /\.ht {
        deny  all;
    }

    location =/readme.html {
        try_files $uri =404;
        deny all;
    }

    #` js css 圖片等文件最大化有效期，不記錄訪問
    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }

    #` ssl憑證
    location ~ /.well-known {
        # the usual settings
    }

    # resolver <IP DNS resolver>;
    # Resolver
    resolver 8.8.8.8 8.8.4.4 valid=300s;  
    resolver_timeout 5s;

}

#` Mozilla SSL Configuration Generator
#` 可自動生成HTTPS設定檔，支援 Apache，Nginx 等多種服務器
#` https://mozilla.github.io/server-side-tls/ssl-config-generator/
